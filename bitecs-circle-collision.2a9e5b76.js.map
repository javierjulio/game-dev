{"mappings":"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","sources":["node_modules/@parcel/runtime-browser-hmr/lib/runtime-d2945bc3c397669a.js","src/bitecs-circle-collision/index.js","node_modules/bitecs/dist/index.mjs","node_modules/bitecs/src/Constants.js","node_modules/bitecs/src/Storage.js","node_modules/bitecs/src/Util.js","node_modules/bitecs/src/Serialize.js","node_modules/bitecs/src/Entity.js","node_modules/bitecs/src/Query.js","node_modules/bitecs/src/Component.js","node_modules/bitecs/src/World.js","node_modules/bitecs/src/System.js","node_modules/bitecs/src/index.js","node_modules/@parcel/transformer-js/src/esmodule-helpers.js"],"sourcesContent":["var HMR_HOST = null;var HMR_PORT = null;var HMR_SECURE = false;var HMR_ENV_HASH = \"4a236f9275d0a351\";module.bundle.HMR_BUNDLE_ID = \"2a5a8eb72a9e5b76\";\"use strict\";\n\nfunction _createForOfIteratorHelper(o, allowArrayLike) { var it; if (typeof Symbol === \"undefined\" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\n/* global HMR_HOST, HMR_PORT, HMR_ENV_HASH, HMR_SECURE */\n\n/*::\nimport type {\n  HMRAsset,\n  HMRMessage,\n} from '@parcel/reporter-dev-server/src/HMRServer.js';\ninterface ParcelRequire {\n  (string): mixed;\n  cache: {|[string]: ParcelModule|};\n  hotData: mixed;\n  Module: any;\n  parent: ?ParcelRequire;\n  isParcelRequire: true;\n  modules: {|[string]: [Function, {|[string]: string|}]|};\n  HMR_BUNDLE_ID: string;\n  root: ParcelRequire;\n}\ninterface ParcelModule {\n  hot: {|\n    data: mixed,\n    accept(cb: (Function) => void): void,\n    dispose(cb: (mixed) => void): void,\n    // accept(deps: Array<string> | string, cb: (Function) => void): void,\n    // decline(): void,\n    _acceptCallbacks: Array<(Function) => void>,\n    _disposeCallbacks: Array<(mixed) => void>,\n  |};\n}\ndeclare var module: {bundle: ParcelRequire, ...};\ndeclare var HMR_HOST: string;\ndeclare var HMR_PORT: string;\ndeclare var HMR_ENV_HASH: string;\ndeclare var HMR_SECURE: boolean;\n*/\nvar OVERLAY_ID = '__parcel__error__overlay__';\nvar OldModule = module.bundle.Module;\n\nfunction Module(moduleName) {\n  OldModule.call(this, moduleName);\n  this.hot = {\n    data: module.bundle.hotData,\n    _acceptCallbacks: [],\n    _disposeCallbacks: [],\n    accept: function accept(fn) {\n      this._acceptCallbacks.push(fn || function () {});\n    },\n    dispose: function dispose(fn) {\n      this._disposeCallbacks.push(fn);\n    }\n  };\n  module.bundle.hotData = undefined;\n}\n\nmodule.bundle.Module = Module;\nvar checkedAssets\n/*: {|[string]: boolean|} */\n, acceptedAssets\n/*: {|[string]: boolean|} */\n, assetsToAccept\n/*: Array<[ParcelRequire, string]> */\n;\n\nfunction getHostname() {\n  return HMR_HOST || (location.protocol.indexOf('http') === 0 ? location.hostname : 'localhost');\n}\n\nfunction getPort() {\n  return HMR_PORT || location.port;\n} // eslint-disable-next-line no-redeclare\n\n\nvar parent = module.bundle.parent;\n\nif ((!parent || !parent.isParcelRequire) && typeof WebSocket !== 'undefined') {\n  var hostname = getHostname();\n  var port = getPort();\n  var protocol = HMR_SECURE || location.protocol == 'https:' && !/localhost|127.0.0.1|0.0.0.0/.test(hostname) ? 'wss' : 'ws';\n  var ws = new WebSocket(protocol + '://' + hostname + (port ? ':' + port : '') + '/'); // $FlowFixMe\n\n  ws.onmessage = function (event\n  /*: {data: string, ...} */\n  ) {\n    checkedAssets = {}\n    /*: {|[string]: boolean|} */\n    ;\n    acceptedAssets = {}\n    /*: {|[string]: boolean|} */\n    ;\n    assetsToAccept = [];\n    var data\n    /*: HMRMessage */\n    = JSON.parse(event.data);\n\n    if (data.type === 'update') {\n      // Remove error overlay if there is one\n      if (typeof document !== 'undefined') {\n        removeErrorOverlay();\n      }\n\n      var assets = data.assets.filter(function (asset) {\n        return asset.envHash === HMR_ENV_HASH;\n      }); // Handle HMR Update\n\n      var handled = assets.every(function (asset) {\n        return asset.type === 'css' || asset.type === 'js' && hmrAcceptCheck(module.bundle.root, asset.id, asset.depsByBundle);\n      });\n\n      if (handled) {\n        console.clear();\n        assets.forEach(function (asset) {\n          hmrApply(module.bundle.root, asset);\n        });\n\n        for (var i = 0; i < assetsToAccept.length; i++) {\n          var id = assetsToAccept[i][1];\n\n          if (!acceptedAssets[id]) {\n            hmrAcceptRun(assetsToAccept[i][0], id);\n          }\n        }\n      } else {\n        window.location.reload();\n      }\n    }\n\n    if (data.type === 'error') {\n      // Log parcel errors to console\n      var _iterator = _createForOfIteratorHelper(data.diagnostics.ansi),\n          _step;\n\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var ansiDiagnostic = _step.value;\n          var stack = ansiDiagnostic.codeframe ? ansiDiagnostic.codeframe : ansiDiagnostic.stack;\n          console.error('🚨 [parcel]: ' + ansiDiagnostic.message + '\\n' + stack + '\\n\\n' + ansiDiagnostic.hints.join('\\n'));\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n\n      if (typeof document !== 'undefined') {\n        // Render the fancy html overlay\n        removeErrorOverlay();\n        var overlay = createErrorOverlay(data.diagnostics.html); // $FlowFixMe\n\n        document.body.appendChild(overlay);\n      }\n    }\n  };\n\n  ws.onerror = function (e) {\n    console.error(e.message);\n  };\n\n  ws.onclose = function () {\n    console.warn('[parcel] 🚨 Connection to the HMR server was lost');\n  };\n}\n\nfunction removeErrorOverlay() {\n  var overlay = document.getElementById(OVERLAY_ID);\n\n  if (overlay) {\n    overlay.remove();\n    console.log('[parcel] ✨ Error resolved');\n  }\n}\n\nfunction createErrorOverlay(diagnostics) {\n  var overlay = document.createElement('div');\n  overlay.id = OVERLAY_ID;\n  var errorHTML = '<div style=\"background: black; opacity: 0.85; font-size: 16px; color: white; position: fixed; height: 100%; width: 100%; top: 0px; left: 0px; padding: 30px; font-family: Menlo, Consolas, monospace; z-index: 9999;\">';\n\n  var _iterator2 = _createForOfIteratorHelper(diagnostics),\n      _step2;\n\n  try {\n    for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n      var diagnostic = _step2.value;\n      var stack = diagnostic.codeframe ? diagnostic.codeframe : diagnostic.stack;\n      errorHTML += \"\\n      <div>\\n        <div style=\\\"font-size: 18px; font-weight: bold; margin-top: 20px;\\\">\\n          \\uD83D\\uDEA8 \".concat(diagnostic.message, \"\\n        </div>\\n        <pre>\").concat(stack, \"</pre>\\n        <div>\\n          \").concat(diagnostic.hints.map(function (hint) {\n        return '<div>💡 ' + hint + '</div>';\n      }).join(''), \"\\n        </div>\\n        \").concat(diagnostic.documentation ? \"<div>\\uD83D\\uDCDD <a style=\\\"color: violet\\\" href=\\\"\".concat(diagnostic.documentation, \"\\\" target=\\\"_blank\\\">Learn more</a></div>\") : '', \"\\n      </div>\\n    \");\n    }\n  } catch (err) {\n    _iterator2.e(err);\n  } finally {\n    _iterator2.f();\n  }\n\n  errorHTML += '</div>';\n  overlay.innerHTML = errorHTML;\n  return overlay;\n}\n\nfunction getParents(bundle, id)\n/*: Array<[ParcelRequire, string]> */\n{\n  var modules = bundle.modules;\n\n  if (!modules) {\n    return [];\n  }\n\n  var parents = [];\n  var k, d, dep;\n\n  for (k in modules) {\n    for (d in modules[k][1]) {\n      dep = modules[k][1][d];\n\n      if (dep === id || Array.isArray(dep) && dep[dep.length - 1] === id) {\n        parents.push([bundle, k]);\n      }\n    }\n  }\n\n  if (bundle.parent) {\n    parents = parents.concat(getParents(bundle.parent, id));\n  }\n\n  return parents;\n}\n\nfunction updateLink(link) {\n  var newLink = link.cloneNode();\n\n  newLink.onload = function () {\n    if (link.parentNode !== null) {\n      // $FlowFixMe\n      link.parentNode.removeChild(link);\n    }\n  };\n\n  newLink.setAttribute('href', // $FlowFixMe\n  link.getAttribute('href').split('?')[0] + '?' + Date.now()); // $FlowFixMe\n\n  link.parentNode.insertBefore(newLink, link.nextSibling);\n}\n\nvar cssTimeout = null;\n\nfunction reloadCSS() {\n  if (cssTimeout) {\n    return;\n  }\n\n  cssTimeout = setTimeout(function () {\n    var links = document.querySelectorAll('link[rel=\"stylesheet\"]');\n\n    for (var i = 0; i < links.length; i++) {\n      // $FlowFixMe[incompatible-type]\n      var href\n      /*: string */\n      = links[i].getAttribute('href');\n      var hostname = getHostname();\n      var servedFromHMRServer = hostname === 'localhost' ? new RegExp('^(https?:\\\\/\\\\/(0.0.0.0|127.0.0.1)|localhost):' + getPort()).test(href) : href.indexOf(hostname + ':' + getPort());\n      var absolute = /^https?:\\/\\//i.test(href) && href.indexOf(window.location.origin) !== 0 && !servedFromHMRServer;\n\n      if (!absolute) {\n        updateLink(links[i]);\n      }\n    }\n\n    cssTimeout = null;\n  }, 50);\n}\n\nfunction hmrApply(bundle\n/*: ParcelRequire */\n, asset\n/*:  HMRAsset */\n) {\n  var modules = bundle.modules;\n\n  if (!modules) {\n    return;\n  }\n\n  if (asset.type === 'css') {\n    reloadCSS();\n  } else if (asset.type === 'js') {\n    var deps = asset.depsByBundle[bundle.HMR_BUNDLE_ID];\n\n    if (deps) {\n      var fn = new Function('require', 'module', 'exports', asset.output);\n      modules[asset.id] = [fn, deps];\n    } else if (bundle.parent) {\n      hmrApply(bundle.parent, asset);\n    }\n  }\n}\n\nfunction hmrAcceptCheck(bundle\n/*: ParcelRequire */\n, id\n/*: string */\n, depsByBundle\n/*: ?{ [string]: { [string]: string } }*/\n) {\n  var modules = bundle.modules;\n\n  if (!modules) {\n    return;\n  }\n\n  if (depsByBundle && !depsByBundle[bundle.HMR_BUNDLE_ID]) {\n    // If we reached the root bundle without finding where the asset should go,\n    // there's nothing to do. Mark as \"accepted\" so we don't reload the page.\n    if (!bundle.parent) {\n      return true;\n    }\n\n    return hmrAcceptCheck(bundle.parent, id, depsByBundle);\n  }\n\n  if (checkedAssets[id]) {\n    return true;\n  }\n\n  checkedAssets[id] = true;\n  var cached = bundle.cache[id];\n  assetsToAccept.push([bundle, id]);\n\n  if (cached && cached.hot && cached.hot._acceptCallbacks.length) {\n    return true;\n  }\n\n  var parents = getParents(module.bundle.root, id); // If no parents, the asset is new. Prevent reloading the page.\n\n  if (!parents.length) {\n    return true;\n  }\n\n  return parents.some(function (v) {\n    return hmrAcceptCheck(v[0], v[1], null);\n  });\n}\n\nfunction hmrAcceptRun(bundle\n/*: ParcelRequire */\n, id\n/*: string */\n) {\n  var cached = bundle.cache[id];\n  bundle.hotData = {};\n\n  if (cached && cached.hot) {\n    cached.hot.data = bundle.hotData;\n  }\n\n  if (cached && cached.hot && cached.hot._disposeCallbacks.length) {\n    cached.hot._disposeCallbacks.forEach(function (cb) {\n      cb(bundle.hotData);\n    });\n  }\n\n  delete bundle.cache[id];\n  bundle(id);\n  cached = bundle.cache[id];\n\n  if (cached && cached.hot && cached.hot._acceptCallbacks.length) {\n    cached.hot._acceptCallbacks.forEach(function (cb) {\n      var assetsToAlsoAccept = cb(function () {\n        return getParents(module.bundle.root, id);\n      });\n\n      if (assetsToAlsoAccept && assetsToAccept.length) {\n        // $FlowFixMe[method-unbinding]\n        assetsToAccept.push.apply(assetsToAccept, assetsToAlsoAccept);\n      }\n    });\n  }\n\n  acceptedAssets[id] = true;\n}","import {\n  createWorld,\n  Types,\n  defineComponent,\n  defineQuery,\n  addEntity,\n  addComponent,\n  pipe,\n} from 'bitecs'\n\nconst Vector3 = { x: Types.f32, y: Types.f32, z: Types.f32 }\nconst Position = defineComponent(Vector3)\nconst Velocity = defineComponent(Vector3)\nconst Shape = defineComponent({ radius: Types.f32, color: Types.f32 })\n\nconst movementQuery = defineQuery([Position, Velocity])\nconst rendererQuery = defineQuery([Position, Velocity, Shape])\n\nconst collisionQuery = defineQuery([Position, Velocity, Shape])\n\nconst collisionSystem = (world) => {\n  const ents = collisionQuery(world)\n\n  for (let i = 0; i < ents.length; i++) {\n    const eid = ents[i]\n    const rest = ents.slice(i + 1)\n    for (let j = 0; j < rest.length; j++) {\n      const id = rest[j]\n\n      var dx = Position.x[eid] - Position.x[id]\n      var dy = Position.y[eid] - Position.y[id]\n      var distance = Math.sqrt(Math.pow(dx, 2) + Math.pow(dy, 2))\n\n      if (distance <= Shape.radius[eid] + Shape.radius[id]) {\n        const vx = Position.x[eid] - Position.x[id]\n        const vy = Position.y[eid] - Position.y[id]\n\n        const unitNormalX = vx / distance\n        const unitNormalY = vy / distance\n        const unitTangentX = -unitNormalY;\n        const unitTangentY = unitNormalX;\n\n        const a_n = Velocity.x[eid] * unitNormalX + Velocity.y[eid] * unitNormalY\n        const b_n = Velocity.x[id] * unitNormalX + Velocity.y[id] * unitNormalY\n        const a_t = Velocity.x[eid] * unitTangentX + Velocity.y[eid] * unitTangentY\n        const b_t = Velocity.x[id] * unitTangentX + Velocity.y[id] * unitTangentY\n\n        // TODO: replace radius (third instance) with a \"mass\" parameter\n        const a_n_final = (a_n * (Shape.radius[eid] - Shape.radius[id]) +\n          2 * Shape.radius[id] * b_n) / (Shape.radius[eid] + Shape.radius[id]);\n        const b_n_final = (b_n * (Shape.radius[id] - Shape.radius[eid]) +\n          2 * Shape.radius[eid] * a_n) / (Shape.radius[eid] + Shape.radius[id]);\n\n        const a_n_x = unitNormalX * a_n_final\n        const a_n_y = unitNormalY * a_n_final\n        const b_n_x = unitNormalX * b_n_final\n        const b_n_y = unitNormalY * b_n_final\n\n        const a_t_x = unitTangentX * a_t\n        const a_t_y = unitTangentY * a_t\n        const b_t_x = unitTangentX * b_t\n        const b_t_y = unitTangentY * b_t\n\n        Velocity.x[eid] = a_n_x + a_t_x\n        Velocity.y[eid] = a_n_y + a_t_y\n        Velocity.x[id] = b_n_x + b_t_x\n        Velocity.y[id] = b_n_y + b_t_y\n      }\n    }\n  }\n  return world\n}\n\nconst movementSystem = (world) => {\n  const ents = movementQuery(world)\n  for (let i = 0; i < ents.length; i++) {\n    const eid = ents[i]\n    Position.x[eid] += Velocity.x[eid]\n    Position.y[eid] += Velocity.y[eid]\n    Position.z[eid] += Velocity.z[eid]\n\n    if (Position.x[eid] - Shape.radius[eid] < 0) {\n      Velocity.x[eid] = Math.abs(Velocity.x[eid]);\n    } else if (Position.x[eid] + Shape.radius[eid] > canvasWidth) {\n      Velocity.x[eid] = -Math.abs(Velocity.x[eid]);\n    }\n\n    if (Position.y[eid] - Shape.radius[eid] < 0) {\n      Velocity.y[eid] = Math.abs(Velocity.y[eid]);\n    } else if (Position.y[eid] + Shape.radius[eid] > canvasHeight) {\n      Velocity.y[eid] = -Math.abs(Velocity.y[eid]);\n    }\n  }\n  return world\n}\n\nlet canvas = document.querySelector(\"canvas\");\nlet ctx = canvas.getContext(\"2d\");\nlet canvasWidth = canvas.width = window.innerWidth\nlet canvasHeight = canvas.height = window.innerHeight;\n\nif (window.devicePixelRatio > 1) {\n  canvas.width = canvasWidth * window.devicePixelRatio;\n  canvas.height = canvasHeight * window.devicePixelRatio;\n  canvas.style.width = `${canvasWidth}px`;\n  canvas.style.height = `${canvasHeight}px`;\n\n  ctx.scale(window.devicePixelRatio, window.devicePixelRatio);\n}\n\nconst rendererSystem = (world) => {\n  const ents = rendererQuery(world)\n  ctx.clearRect(0, 0, canvasWidth, canvasHeight)\n  for (let i = 0; i < ents.length; i++) {\n    const eid = ents[i]\n\n    ctx.beginPath();\n    ctx.arc(Position.x[eid], Position.y[eid], Shape.radius[eid], 0, 2 * Math.PI);\n    ctx.fillStyle = `hsl(${Shape.color[eid]}, 50%, 50%)`\n    ctx.fill()\n    // ctx.strokeStyle = \"white\";\n    // ctx.stroke();\n  }\n  return world\n}\n\nconst timeSystem = world => {\n  const { time } = world\n  const now = performance.now()\n  const delta = now - time.then\n  time.delta = delta\n  time.elapsed += delta\n  time.then = now\n  return world\n}\n\nconst pipeline = pipe(movementSystem, collisionSystem, rendererSystem, timeSystem)\n\nconst world = createWorld()\nworld.time = { delta: 0, elapsed: 0, then: performance.now() }\n\nconst generateEntity = (x, y, vx, vy, radius) => {\n  const eid = addEntity(world)\n  addComponent(world, Position, eid)\n  Position.x[eid] = x\n  Position.y[eid] = y\n\n  addComponent(world, Velocity, eid)\n  Velocity.x[eid] = vx\n  Velocity.y[eid] = vy\n\n  addComponent(world, Shape, eid)\n  Shape.radius[eid] = radius\n  Shape.color[eid] = Math.random() * 360\n}\n\nconst DESIRED_NUM_OBJECTS = 100\nconst MIN_RADIUS = 8\nconst MAX_RADIUS = 32\nconst SPEED_MULTIPLIER = .4;\n\nconst safeAreas = []\nconst size = MAX_RADIUS * 2\nconst start = MAX_RADIUS\nconst maxHeight = canvasHeight - MAX_RADIUS\nconst maxWidth = canvasWidth - MAX_RADIUS\n\nfor (let x = start; x < maxWidth; x += size) {\n  for (let y = start; y < maxHeight; y += size) {\n    safeAreas.push({ x: x, y: y})\n  }\n}\n\nfunction randomRange(min, max) {\n  return Math.random() * (max - min) + min\n}\n\nconst maxCells = Math.min(DESIRED_NUM_OBJECTS, safeAreas.length)\nfor (let i = 0; i < maxCells; i++) {\n  const randomIndex = Math.floor(Math.random() * safeAreas.length)\n  const safeArea = safeAreas.splice(randomIndex, 1)[0]\n\n  generateEntity(\n    safeArea.x,\n    safeArea.y,\n    SPEED_MULTIPLIER * (2 * Math.random() - 1),\n    SPEED_MULTIPLIER * (2 * Math.random() - 1),\n    Math.floor(randomRange(MIN_RADIUS, MAX_RADIUS))\n  )\n}\nwindow.generateEntity = generateEntity\n// generateEntity(40, 40, SPEED_MULTIPLIER * (2 * Math.random() - 1), SPEED_MULTIPLIER * (2 * Math.random() - 1), MAX_RADIUS)\n// generateEntity(40, 280, SPEED_MULTIPLIER * (2 * Math.random() - 1), SPEED_MULTIPLIER * (2 * Math.random() - 1), MAX_RADIUS)\n\nconst run = () => {\n  pipeline(world)\n  requestAnimationFrame(run)\n}\nwindow.run = run\nrun()\n\n// setInterval(() => {\n//   pipeline(world)\n// }, 16)\n\n// // Run!\n// function run() {\n//   // Compute delta and elapsed time\n//   var time = performance.now();\n//   var delta = time - lastTime;\n//   // Run all the systems\n//   world.execute(delta, time);\n//   lastTime = time;\n//   requestAnimationFrame(run);\n// }\n// var lastTime = performance.now();\n// run();\n\n\n\n\n\n// import {\n//   createWorld,\n//   Types,\n//   defineComponent,\n//   defineQuery,\n//   addEntity,\n//   addComponent,\n//   pipe,\n// } from 'bitecs'\n// import InputManager from './input-manager'\n\n// const input = new InputManager(window)\n// input.addEventListeners()\n\n// const SHAPE_ASTEROID = 0\n// const SHAPE_SPACESHIP = 1\n\n// const Vector3 = { x: Types.f32, y: Types.f32, z: Types.f32 }\n// const Position = defineComponent(Vector3)\n// const Velocity = defineComponent(Vector3)\n// const PlayerControlled = defineComponent()\n// const Asteroid = defineComponent()\n// const Shape = defineComponent({ type: Types.f32 })\n\n// const movementQuery = defineQuery([Position, Velocity])\n// const motionControlQuery = defineQuery([Position, Velocity, PlayerControlled])\n// const rendererQuery = defineQuery([Position, Velocity, Shape])\n\n// // asteroids collide with player (game over)\n// // bullets collide with asteroid (hit)\n// // asteroids DO NOT COLLIDE with other asteroids\n\n// const asteroidQuery = defineQuery([Position, Velocity, Asteroid])\n// const playerQuery = defineQuery([Position, Velocity, PlayerControlled])\n\n// const collisionSystem = (world) => {\n//   const player = playerQuery(world)\n//   const ents = asteroidQuery(world)\n\n//   for (let i = 0; i < player.length; i++) {\n//     const eid = player[i]\n\n//     for (let j = 0; j < ents.length; j++) {\n//       const id = ents[j]\n\n//       if (eid === id) {\n//         continue;\n//       }\n\n//       const radius = 10\n//       var dx = (Position.x[eid] + radius) - (Position.x[id] + radius);\n//       var dy = (Position.y[eid] + radius) - (Position.y[id] + radius);\n//       var distance = Math.sqrt(dx * dx + dy * dy);\n\n//       if (distance < radius + radius) {\n//         console.log(\"collision detected\")\n//         Velocity.x[eid] *= -1\n//         Velocity.y[eid] *= -1\n//         Velocity.x[id] *= -1\n//         Velocity.y[id] *= -1\n//       }\n//     }\n//   }\n\n//   // // for (let i = 0; i < ents.length; i++) {\n//   // //   const eid = ents[i]\n\n//   // //   for (let j = 0; j < ents.length; j++) {\n//   // //     const id = ents[j]\n\n//   // //     if (eid === id) {\n//   // //       continue;\n//   // //     }\n\n//   //     const radius = 10\n//   //     const eid = 0\n//   //     const id = 1\n//   //     var dx = (Position.x[eid] + radius) - (Position.x[id] + radius);\n//   //     var dy = (Position.y[eid] + radius) - (Position.y[id] + radius);\n//   //     var distance = Math.sqrt(dx * dx + dy * dy);\n\n//   //     if (distance < radius + radius) {\n//   //       console.log(\"collision detected\")\n//   //       Velocity.x[eid] *= -1\n//   //       Velocity.y[eid] *= -1\n//   //       Velocity.x[id] *= -1\n//   //       Velocity.y[id] *= -1\n//   //     }\n//   // //   }\n//   // // }\n//   return world\n// }\n\n// const movementSystem = (world) => {\n//   const ents = movementQuery(world)\n//   for (let i = 0; i < ents.length; i++) {\n//     const eid = ents[i]\n//     Position.x[eid] += Velocity.x[eid]\n//     Position.y[eid] += Velocity.y[eid]\n//     Position.z[eid] += Velocity.z[eid]\n//   }\n//   return world\n// }\n\n// const motionControlSystem = (world) => {\n//   const ents = motionControlQuery(world)\n//   for (let i = 0; i < ents.length; i++) {\n//     const eid = ents[i]\n//     if (input.keyPoll.up !== 0) {\n//       Velocity.y[eid] -= 0.01\n//     } else if (input.keyPoll.down !== 0) {\n//       Velocity.y[eid] += 0.01\n//     }\n//     if (input.keyPoll.left !== 0) {\n//       Velocity.x[eid] -= 0.01\n//     } else if (input.keyPoll.right !== 0) {\n//       Velocity.x[eid] += 0.01\n//     }\n//   }\n//   return world\n// }\n\n// let canvas = document.querySelector(\"canvas\");\n// let canvasWidth = canvas.width = window.innerWidth;\n// let canvasHeight = canvas.height = window.innerHeight;\n// let ctx = canvas.getContext(\"2d\");\n\n// const rendererSystem = (world) => {\n//   const ents = rendererQuery(world)\n//   ctx.clearRect(0, 0, canvasWidth, canvasHeight)\n//   for (let i = 0; i < ents.length; i++) {\n//     const eid = ents[i]\n\n//     if (Shape.type[eid] === SHAPE_ASTEROID) {\n//       ctx.beginPath();\n//       ctx.arc(Position.x[eid], Position.y[eid], 10, 0, 2 * Math.PI);\n//       ctx.strokeStyle = \"white\";\n//       ctx.stroke();\n//     }\n//     else if (Shape.type[eid] === SHAPE_SPACESHIP) {\n//       ctx.beginPath();\n//       ctx.arc(Position.x[eid], Position.y[eid], 10, 0, 2 * Math.PI);\n//       ctx.fillStyle = \"white\";\n//       ctx.fill();\n//     }\n//   }\n//   return world\n// }\n\n// const timeSystem = world => {\n//   const { time } = world\n//   const now = performance.now()\n//   const delta = now - time.then\n//   time.delta = delta\n//   time.elapsed += delta\n//   time.then = now\n//   return world\n// }\n\n// const pipeline = pipe(motionControlSystem, movementSystem, collisionSystem, rendererSystem, timeSystem)\n\n// const world = createWorld()\n// world.time = { delta: 0, elapsed: 0, then: performance.now() }\n\n// const generateAsteroid = (x, y) => {\n//   const eid = addEntity(world)\n//   addComponent(world, Asteroid, eid)\n\n//   addComponent(world, Position, eid)\n//   Position.x[eid] = x\n//   Position.y[eid] = y\n\n//   addComponent(world, Velocity, eid)\n//   Velocity.x[eid] = 0.1\n//   Velocity.y[eid] = 0.1\n\n//   addComponent(world, Shape, eid)\n//   Shape.type[eid] = SHAPE_ASTEROID\n// }\n\n// generateAsteroid(0, 0)\n// generateAsteroid(50, 0)\n\n// const createPlayer = (x, y, vx, vy) => {\n//   const eid = addEntity(world)\n//   addComponent(world, PlayerControlled, eid)\n//   addComponent(world, Position, eid)\n//   Position.x[eid] = x\n//   Position.y[eid] = y\n//   addComponent(world, Velocity, eid)\n//   Velocity.x[eid] = vx\n//   Velocity.y[eid] = vy\n//   addComponent(world, Shape, eid)\n//   Shape.type[eid] = SHAPE_SPACESHIP\n// }\n\n// createPlayer(100, 0, -0.1, 0.1)\n\n// const run = () => {\n//   pipeline(world)\n//   requestAnimationFrame(run)\n// }\n// run()\n\n// // setInterval(() => {\n// //   pipeline(world)\n// // }, 16)\n\n// // // Run!\n// // function run() {\n// //   // Compute delta and elapsed time\n// //   var time = performance.now();\n// //   var delta = time - lastTime;\n// //   // Run all the systems\n// //   world.execute(delta, time);\n// //   lastTime = time;\n// //   requestAnimationFrame(run);\n// // }\n// // var lastTime = performance.now();\n// // run();\n",null,"export const TYPES_ENUM = {\n  i8: 'i8',\n  ui8: 'ui8',\n  ui8c: 'ui8c',\n  i16: 'i16',\n  ui16: 'ui16',\n  i32: 'i32',\n  ui32: 'ui32',\n  f32: 'f32',\n  f64: 'f64',\n  eid: 'eid',\n}\n\nexport const TYPES_NAMES = {\n  i8: 'Int8',\n  ui8: 'Uint8',\n  ui8c: 'Uint8Clamped',\n  i16: 'Int16',\n  ui16: 'Uint16',\n  i32: 'Int32',\n  ui32: 'Uint32',\n  eid: 'Uint32',\n  f32: 'Float32',\n  f64: 'Float64'\n}\n\nexport const TYPES = {\n  i8: Int8Array,\n  ui8: Uint8Array,\n  ui8c: Uint8ClampedArray,\n  i16: Int16Array,\n  ui16: Uint16Array,\n  i32: Int32Array,\n  ui32: Uint32Array,\n  f32: Float32Array,\n  f64: Float64Array,\n  eid: Uint32Array,\n}\n\nexport const UNSIGNED_MAX = {\n  uint8: 2**8,\n  uint16: 2**16,\n  uint32: 2**32\n}\n","import { TYPES, TYPES_ENUM, TYPES_NAMES, UNSIGNED_MAX } from './Constants.js'\n// import { createAllocator } from './Allocator.js'\n\nconst roundToMultiple = mul => x => Math.ceil(x / mul) * mul\nconst roundToMultiple4 = roundToMultiple(4)\n\nexport const $storeRef = Symbol('storeRef')\nexport const $storeSize = Symbol('storeSize')\nexport const $storeMaps = Symbol('storeMaps')\nexport const $storeFlattened = Symbol('storeFlattened')\nexport const $storeBase = Symbol('storeBase')\nexport const $storeType = Symbol('storeType')\n\nexport const $storeArrayElementCounts = Symbol('storeArrayElementCounts')\nexport const $storeSubarrays = Symbol('storeSubarrays')\nexport const $subarrayCursors = Symbol('subarrayCursors')\nexport const $subarray = Symbol('subarray')\nexport const $subarrayFrom = Symbol('subarrayFrom')\nexport const $subarrayTo = Symbol('subarrayTo')\nexport const $parentArray = Symbol('subStore')\nexport const $tagStore = Symbol('tagStore')\n\nexport const $queryShadow = Symbol('queryShadow')\nexport const $serializeShadow = Symbol('serializeShadow')\n\nexport const $indexType = Symbol('indexType')\nexport const $indexBytes = Symbol('indexBytes')\n\nexport const $isEidType = Symbol('isEidType')\n\nconst stores = {}\n\n// const alloc = createAllocator()\n\nexport const resize = (ta, size) => {\n  const newBuffer = new ArrayBuffer(size * ta.BYTES_PER_ELEMENT)\n  const newTa = new ta.constructor(newBuffer)\n  newTa.set(ta, 0)\n  return newTa\n}\n\nexport const createShadow = (store, key) => {\n  if (!ArrayBuffer.isView(store)) {\n    const shadowStore = store[$parentArray].slice(0)\n    store[key] = store.map((_,eid) => {\n      const from = store[eid][$subarrayFrom]\n      const to = store[eid][$subarrayTo]\n      return shadowStore.subarray(from, to)\n    })\n  } else {\n    store[key] = store.slice(0)\n  }\n}\n\nconst resizeSubarray = (metadata, store, size) => {\n  const cursors = metadata[$subarrayCursors]\n  let type = store[$storeType]\n  const length = store[0].length\n  const indexType =\n    length <= UNSIGNED_MAX.uint8\n      ? TYPES_ENUM.ui8\n      : length <= UNSIGNED_MAX.uint16\n        ? TYPES_ENUM.ui16\n        : TYPES_ENUM.ui32\n\n  if (cursors[type] === 0) {\n\n    const arrayElementCount = metadata[$storeArrayElementCounts][type]\n    \n    // // for threaded impl\n    // // const summedBytesPerElement = Array(arrayCount).fill(0).reduce((a, p) => a + TYPES[type].BYTES_PER_ELEMENT, 0)\n    // // const totalBytes = roundToMultiple4(summedBytesPerElement * summedLength * size)\n    // // const buffer = new SharedArrayBuffer(totalBytes)\n\n    const array = new TYPES[type](roundToMultiple4(arrayElementCount * size))\n\n    array.set(metadata[$storeSubarrays][type])\n    \n    metadata[$storeSubarrays][type] = array\n    \n    array[$indexType] = TYPES_NAMES[indexType]\n    array[$indexBytes] = TYPES[indexType].BYTES_PER_ELEMENT\n  }\n\n  const start = cursors[type]\n  let end = 0\n  for (let eid = 0; eid < size; eid++) {\n    const from = cursors[type] + (eid * length)\n    const to = from + length\n\n    store[eid] = metadata[$storeSubarrays][type].subarray(from, to)\n    \n    store[eid][$subarrayFrom] = from\n    store[eid][$subarrayTo] = to\n    store[eid][$subarray] = true\n    store[eid][$indexType] = TYPES_NAMES[indexType]\n    store[eid][$indexBytes] = TYPES[indexType].BYTES_PER_ELEMENT\n    \n    end = to\n  }\n\n  cursors[type] = end\n\n  store[$parentArray] = metadata[$storeSubarrays][type].subarray(start, end)\n}\n\nconst resizeRecursive = (metadata, store, size) => {\n  Object.keys(store).forEach(key => {\n    const ta = store[key]\n    if (Array.isArray(ta)) {\n      resizeSubarray(metadata, ta, size)\n      store[$storeFlattened].push(ta)\n    } else if (ArrayBuffer.isView(ta)) {\n      store[key] = resize(ta, size)\n      store[$storeFlattened].push(store[key])\n    } else if (typeof ta === 'object') {\n      resizeRecursive(metadata, store[key], size)\n    }\n  })\n}\n\nexport const resizeStore = (store, size) => {\n  if (store[$tagStore]) return\n  store[$storeSize] = size\n  store[$storeFlattened].length = 0\n  Object.keys(store[$subarrayCursors]).forEach(k => {\n    store[$subarrayCursors][k] = 0\n  })\n  resizeRecursive(store, store, size)\n}\n\nexport const resetStore = store => {\n  if (store[$storeFlattened]) {\n    store[$storeFlattened].forEach(ta => {\n      ta.fill(0)\n    })\n    Object.keys(store[$storeSubarrays]).forEach(key => {\n      store[$storeSubarrays][key].fill(0)\n    })\n  }\n}\n\nexport const resetStoreFor = (store, eid) => {\n  if (store[$storeFlattened]) {\n    store[$storeFlattened].forEach(ta => {\n      if (ArrayBuffer.isView(ta)) ta[eid] = 0\n      else ta[eid].fill(0)\n    })\n  }\n}\n\n// const createTypeStore = (type, length) => {\n//   const store = alloc(type, length)\n//   store[$isEidType] = type === TYPES_ENUM.eid\n//   return store\n// }\nconst createTypeStore = (type, length) => {\n  const totalBytes = length * TYPES[type].BYTES_PER_ELEMENT\n  const buffer = new ArrayBuffer(totalBytes)\n  const store = new TYPES[type](buffer)\n  store[$isEidType] = type === TYPES_ENUM.eid\n  return store\n}\n\nexport const parentArray = store => store[$parentArray]\n\nconst createArrayStore = (metadata, type, length) => {\n  const size = metadata[$storeSize]\n  const store = Array(size).fill(0)\n  store[$storeType] = type\n  store[$isEidType] = type === TYPES_ENUM.eid\n\n  const cursors = metadata[$subarrayCursors]\n  const indexType =\n    length <= UNSIGNED_MAX.uint8\n      ? TYPES_ENUM.ui8\n      : length <= UNSIGNED_MAX.uint16\n        ? TYPES_ENUM.ui16\n        : TYPES_ENUM.ui32\n\n  if (!length) throw new Error('bitECS - Must define component array length')\n  if (!TYPES[type]) throw new Error(`bitECS - Invalid component array property type ${type}`)\n\n  // create buffer for type if it does not already exist\n  if (!metadata[$storeSubarrays][type]) {\n    const arrayElementCount = metadata[$storeArrayElementCounts][type]\n\n    // for threaded impl\n    // const summedBytesPerElement = Array(arrayCount).fill(0).reduce((a, p) => a + TYPES[type].BYTES_PER_ELEMENT, 0)\n    // const totalBytes = roundToMultiple4(summedBytesPerElement * summedLength * size)\n    // const buffer = new SharedArrayBuffer(totalBytes)\n\n    const array = new TYPES[type](roundToMultiple4(arrayElementCount * size))\n\n    metadata[$storeSubarrays][type] = array\n    \n    array[$indexType] = TYPES_NAMES[indexType]\n    array[$indexBytes] = TYPES[indexType].BYTES_PER_ELEMENT\n  }\n\n  // pre-generate subarrays for each eid\n  const start = cursors[type]\n  let end = 0\n  for (let eid = 0; eid < size; eid++) {\n    const from = cursors[type] + (eid * length)\n    const to = from + length\n\n    store[eid] = metadata[$storeSubarrays][type].subarray(from, to)\n    \n    store[eid][$subarrayFrom] = from\n    store[eid][$subarrayTo] = to\n    store[eid][$subarray] = true\n    store[eid][$indexType] = TYPES_NAMES[indexType]\n    store[eid][$indexBytes] = TYPES[indexType].BYTES_PER_ELEMENT\n    \n    end = to\n  }\n\n  cursors[type] = end\n\n  store[$parentArray] = metadata[$storeSubarrays][type].subarray(start, end)\n\n  return store\n}\n\nconst isArrayType = x => Array.isArray(x) && typeof x[0] === 'string' && typeof x[1] === 'number'\n\nexport const createStore = (schema, size) => {\n  const $store = Symbol('store')\n\n  if (!schema || !Object.keys(schema).length) {\n    // tag component\n    stores[$store] = {\n      [$storeSize]: size,\n      [$tagStore]: true,\n      [$storeBase]: () => stores[$store]\n    }\n    return stores[$store]\n  }\n\n  schema = JSON.parse(JSON.stringify(schema))\n\n  const arrayElementCounts = {}\n  const collectArrayElementCounts = s => {\n    const keys = Object.keys(s)\n    for (const k of keys) {\n      if (isArrayType(s[k])) {\n        if (!arrayElementCounts[s[k][0]]) arrayElementCounts[s[k][0]] = 0\n        arrayElementCounts[s[k][0]] += s[k][1]\n      } else if (s[k] instanceof Object) {\n        collectArrayElementCounts(s[k])\n      }\n    }\n  }\n  collectArrayElementCounts(schema)\n\n  const metadata = {\n    [$storeSize]: size,\n    [$storeMaps]: {},\n    [$storeSubarrays]: {},\n    [$storeRef]: $store,\n    [$subarrayCursors]: Object.keys(TYPES).reduce((a, type) => ({ ...a, [type]: 0 }), {}),\n    [$storeFlattened]: [],\n    [$storeArrayElementCounts]: arrayElementCounts\n  }\n\n  if (schema instanceof Object && Object.keys(schema).length) {\n\n    const recursiveTransform = (a, k) => {\n\n      if (typeof a[k] === 'string') {\n\n        a[k] = createTypeStore(a[k], size)\n        a[k][$storeBase] = () => stores[$store]\n        metadata[$storeFlattened].push(a[k])\n\n      } else if (isArrayType(a[k])) {\n        \n        const [type, length] = a[k]\n        a[k] = createArrayStore(metadata, type, length)\n        a[k][$storeBase] = () => stores[$store]\n        metadata[$storeFlattened].push(a[k])\n        // Object.seal(a[k])\n\n      } else if (a[k] instanceof Object) {\n        \n        a[k] = Object.keys(a[k]).reduce(recursiveTransform, a[k])\n        // Object.seal(a[k])\n        \n      }\n\n      return a\n    }\n\n    stores[$store] = Object.assign(Object.keys(schema).reduce(recursiveTransform, schema), metadata)\n    stores[$store][$storeBase] = () => stores[$store]\n\n    // Object.seal(stores[$store])\n\n    return stores[$store]\n\n  }\n}\n\nexport const free = (store) => {\n  delete stores[store[$storeRef]]\n}","export const Uint32SparseSet = (length) => {\n  const dense = new Uint32Array(length)\n  const sparse = new Uint32Array(length)\n\n  let cursor = 0\n  dense.count = () => cursor + 1\n\n  const has = val => dense[sparse[val]] === val\n\n  const add = val => {\n    if (has(val)) return\n    sparse[val] = cursor\n    dense[cursor] = val\n\n    cursor++\n  }\n\n  const remove = val => {\n    if (!has(val)) return\n    const index = sparse[val]\n    const swapped = dense[cursor]\n    if (swapped !== val) {\n      dense[index] = swapped\n      sparse[swapped] = index\n    }\n\n    cursor--\n  }\n\n  return {\n    add,\n    remove,\n    has,\n    sparse,\n    dense,\n  }\n}\n\nexport const SparseSet = () => {\n  const dense = []\n  const sparse = []\n\n  dense.sort = function (comparator) {\n    const result = Array.prototype.sort.call(this, comparator)\n\n    for(let i = 0; i < dense.length; i++) {\n      sparse[dense[i]] = i\n    }\n    \n    return result\n  }\n\n  const has = val => dense[sparse[val]] === val\n\n  const add = val => {\n    if (has(val)) return\n    sparse[val] = dense.push(val) - 1\n  }\n\n  const remove = val => {\n    if (!has(val)) return\n    const index = sparse[val]\n    const swapped = dense.pop()\n    if (swapped !== val) {\n      dense[index] = swapped\n      sparse[swapped] = index\n    }\n  }\n\n  return {\n    add,\n    remove,\n    has,\n    sparse,\n    dense,\n  }\n}","import { $indexBytes, $indexType, $isEidType, $serializeShadow, $storeBase, $storeFlattened, $tagStore, createShadow } from \"./Storage.js\"\nimport { $componentMap, addComponent, hasComponent } from \"./Component.js\"\nimport { $entityArray, $entitySparseSet, addEntity, eidToWorld } from \"./Entity.js\"\nimport { $localEntities, $localEntityLookup } from \"./World.js\"\n\nexport const DESERIALIZE_MODE = {\n  REPLACE: 0,\n  APPEND: 1,\n  MAP: 2\n}\n\nlet resized = false\n\nexport const setSerializationResized = v => { resized = v }\n\nconst concat = (a,v) => a.concat(v)\nconst not = fn => v => !fn(v)\n\nconst storeFlattened = c => c[$storeFlattened]\nconst isFullComponent = storeFlattened\nconst isProperty = not(isFullComponent)\n\nconst isModifier = c => typeof c === 'function'\nconst isNotModifier = not(isModifier)\n\nconst isChangedModifier = c => isModifier(c) && c()[1] === 'changed'\n\nconst isWorld = w => Object.getOwnPropertySymbols(w).includes($componentMap)\n\nconst fromModifierToComponent = c => c()[0]\n\nexport const canonicalize = target => {\n\n  if (isWorld(target)) return [[],new Map()]\n\n  // aggregate full components\n  const fullComponentProps = target\n    .filter(isNotModifier)\n    .filter(isFullComponent)\n    .map(storeFlattened).reduce(concat, [])\n  \n  // aggregate changed full components\n  const changedComponentProps = target\n    .filter(isChangedModifier).map(fromModifierToComponent)\n    .filter(isFullComponent)\n    .map(storeFlattened).reduce(concat, [])\n\n  // aggregate props\n  const props = target\n    .filter(isNotModifier)\n    .filter(isProperty)\n\n  // aggregate changed props\n  const changedProps = target\n    .filter(isChangedModifier).map(fromModifierToComponent)\n    .filter(isProperty)\n  \n  const componentProps = [...fullComponentProps, ...props, ...changedComponentProps, ...changedProps]\n  const allChangedProps = [...changedComponentProps, ...changedProps].reduce((map,prop) => {\n    const $ = Symbol()\n    createShadow(prop, $)\n    map.set(prop, $)\n    return map\n  }, new Map())\n\n  return [componentProps, allChangedProps]\n}\n\n/**\n * Defines a new serializer which targets the given components to serialize the data of when called on a world or array of EIDs.\n *\n * @param {object|array} target\n * @param {number} [maxBytes=20000000]\n * @returns {function} serializer\n */\nexport const defineSerializer = (target, maxBytes = 20000000) => {\n  const worldSerializer = isWorld(target)\n\n  let [componentProps, changedProps] = canonicalize(target)\n\n  // TODO: calculate max bytes based on target & recalc upon resize\n\n  const buffer = new ArrayBuffer(maxBytes)\n  const view = new DataView(buffer)\n\n  const entityComponentCache = new Map()\n\n  return (ents) => {\n\n    if (resized) {\n      [componentProps, changedProps] = canonicalize(target)\n      resized = false\n    }\n\n    if (worldSerializer) {\n      componentProps = []\n      target[$componentMap].forEach((c, component) => {\n        if (component[$storeFlattened])\n          componentProps.push(...component[$storeFlattened])\n        else componentProps.push(component)\n      })\n    }\n    \n    let world\n    if (Object.getOwnPropertySymbols(ents).includes($componentMap)) {\n      world = ents\n      ents = ents[$entityArray]\n    } else {\n      world = eidToWorld.get(ents[0])\n    }\n\n    let where = 0\n\n    if (!ents.length) return buffer.slice(0, where)\n\n    const cache = new Map()\n\n    // iterate over component props\n    for (let pid = 0; pid < componentProps.length; pid++) {\n      const prop = componentProps[pid]\n      const component = prop[$storeBase]()\n      const $diff = changedProps.get(prop)\n      const shadow = $diff ? prop[$diff] : null\n\n      if (!cache.has(component)) cache.set(component, new Map())\n\n      // write pid\n      view.setUint8(where, pid)\n      where += 1\n\n      // save space for entity count\n      const countWhere = where\n      where += 4\n\n      let writeCount = 0\n      // write eid,val\n      for (let i = 0; i < ents.length; i++) {\n        const eid = ents[i]\n\n        let componentCache = entityComponentCache.get(eid)\n        if (!componentCache) componentCache = entityComponentCache.set(eid, new Set()).get(eid)\n        \n        componentCache.add(eid)\n        \n        const newlyAddedComponent = \n          // if we are diffing\n          shadow \n          // and we have already iterated over this component for this entity\n          // retrieve cached value    \n          && cache.get(component).get(eid)\n          // or if entity did not have component last call\n          || !componentCache.has(component)\n          // and entity has component this call\n          && hasComponent(world, component, eid)\n\n        cache.get(component).set(eid, newlyAddedComponent)\n\n        if (newlyAddedComponent) {\n          componentCache.add(component)\n        } else if (!hasComponent(world, component, eid)) {\n          // skip if entity doesn't have this component\n          componentCache.delete(component)\n          continue\n        } \n\n        \n        const rewindWhere = where\n\n        // write eid\n        view.setUint32(where, eid)\n        where += 4\n\n        // if it's a tag store we can stop here\n        if (prop[$tagStore]) {\n          writeCount++\n          continue\n        }\n\n        // if property is an array\n        if (ArrayBuffer.isView(prop[eid])) {\n          const type = prop[eid].constructor.name.replace('Array', '')\n          const indexType = prop[eid][$indexType]\n          const indexBytes = prop[eid][$indexBytes]\n\n          // save space for count of dirty array elements\n          const countWhere2 = where\n          where += indexBytes\n\n          let arrayWriteCount = 0\n\n          // write index,value\n          for (let i = 0; i < prop[eid].length; i++) {\n\n            if (shadow) {\n\n              const changed = shadow[eid][i] !== prop[eid][i]\n              \n              // sync shadow\n              shadow[eid][i] = prop[eid][i]              \n\n              // if state has not changed since the last call\n              // todo: if newly added then entire component will serialize (instead of only changed values)\n              if (!changed && !newlyAddedComponent) {\n                // skip writing this value\n                continue\n              }\n            }\n            \n            // write array index\n            view[`set${indexType}`](where, i)\n            where += indexBytes\n            \n            // write value at that index\n            const value = prop[eid][i]\n            view[`set${type}`](where, value)\n            where += prop[eid].BYTES_PER_ELEMENT\n            arrayWriteCount++\n          }\n\n          if (arrayWriteCount > 0) {\n            // write total element count\n            view[`set${indexType}`](countWhere2, arrayWriteCount)\n            writeCount++\n          } else {\n            where = rewindWhere\n            continue\n          }\n        } else {\n\n          if (shadow) {\n\n            const changed = shadow[eid] !== prop[eid]\n\n            shadow[eid] = prop[eid]\n\n            // do not write value if diffing and no change\n            if (!changed && !newlyAddedComponent) {\n              // rewind the serializer\n              where = rewindWhere\n              // skip writing this value\n              continue\n            }\n\n          }  \n\n\n          const type = prop.constructor.name.replace('Array', '')\n          // set value next [type] bytes\n          view[`set${type}`](where, prop[eid])\n          where += prop.BYTES_PER_ELEMENT\n\n          writeCount++\n        }\n      }\n\n      if (writeCount > 0) {\n        // write how many eid/value pairs were written\n        view.setUint32(countWhere, writeCount)\n      } else {\n        // if nothing was written (diffed with no changes) \n        // then move cursor back 5 bytes (remove PID and countWhere space)\n        where -= 5\n      }\n    }\n    return buffer.slice(0, where)\n  }\n}\n\nconst newEntities = new Map()\n\n/**\n * Defines a new deserializer which targets the given components to deserialize onto a given world.\n *\n * @param {object|array} target\n * @returns {function} deserializer\n */\nexport const defineDeserializer = (target) => {\n  const isWorld = Object.getOwnPropertySymbols(target).includes($componentMap)\n  let [componentProps] = canonicalize(target)\n\n\n  return (world, packet, mode=0) => {\n\n    const deserializedEntities = []\n\n    newEntities.clear()\n    \n    if (resized) {\n      [componentProps] = canonicalize(target)\n      resized = false\n    }\n\n    if (isWorld) {\n      componentProps = []\n      target[$componentMap].forEach((c, component) => {\n        if (component[$storeFlattened])\n          componentProps.push(...component[$storeFlattened])\n        else componentProps.push(component)\n      })\n    }\n\n    const localEntities = world[$localEntities]\n    const localEntityLookup = world[$localEntityLookup]\n\n    const view = new DataView(packet)\n    let where = 0\n\n    while (where < packet.byteLength) {\n\n      // pid\n      const pid = view.getUint8(where)\n      where += 1\n\n      // entity count\n      const entityCount = view.getUint32(where)\n      where += 4\n\n      // component property\n      const prop = componentProps[pid]\n\n      // Get the entities and set their prop values\n      for (let i = 0; i < entityCount; i++) {\n        let eid = view.getUint32(where) // throws with [changed, c, changed]\n        where += 4\n\n        if (mode === DESERIALIZE_MODE.MAP) {\n          if (localEntities.has(eid)) {\n            eid = localEntities.get(eid)\n          } else if (newEntities.has(eid)) {\n            eid = newEntities.get(eid)\n          } else {\n            const newEid = addEntity(world)\n            localEntities.set(eid, newEid)\n            localEntityLookup.set(newEid, eid)\n            newEntities.set(eid, newEid)\n            eid = newEid\n          }\n        }\n\n        if (mode === DESERIALIZE_MODE.APPEND ||  \n          mode === DESERIALIZE_MODE.REPLACE && !world[$entitySparseSet].has(eid)\n        ) {\n          const newEid = newEntities.get(eid) || addEntity(world)\n          newEntities.set(eid, newEid)\n          eid = newEid\n        }\n\n        const component = prop[$storeBase]()\n        if (!hasComponent(world, component, eid)) {\n          addComponent(world, component, eid)\n        }\n\n        // add eid to deserialized ents after it has been transformed by MAP mode\n        deserializedEntities.push(eid)\n\n        if (component[$tagStore]) {\n          continue\n        }\n        \n        if (ArrayBuffer.isView(prop[eid])) {\n          const array = prop[eid]\n          const count = view[`get${array[$indexType]}`](where)\n          where += array[$indexBytes]\n\n          // iterate over count\n          for (let i = 0; i < count; i++) {\n            const index = view[`get${array[$indexType]}`](where)\n            where += array[$indexBytes]\n\n            const value = view[`get${array.constructor.name.replace('Array', '')}`](where)\n            where += array.BYTES_PER_ELEMENT\n            if (prop[$isEidType]) {\n              let localEid = localEntities.get(value)\n              if (!world[$entitySparseSet].has(localEid)) localEid = addEntity(world)\n              prop[eid][index] = localEid\n            } else prop[eid][index] = value\n          }\n        } else {\n          const value = view[`get${prop.constructor.name.replace('Array', '')}`](where)\n          where += prop.BYTES_PER_ELEMENT\n\n          if (prop[$isEidType]) {\n            let localEid = localEntities.get(value)\n            if (!world[$entitySparseSet].has(localEid)) localEid = addEntity(world)\n            prop[eid] = localEid\n          } else prop[eid] = value\n        }\n      }\n    }\n\n    return deserializedEntities\n  }\n}","import { resizeComponents } from './Component.js'\nimport { $notQueries, $queries, queryAddEntity, queryCheckEntity, queryRemoveEntity } from './Query.js'\nimport { $localEntities, $localEntityLookup, resizeWorlds } from './World.js'\nimport { setSerializationResized } from './Serialize.js'\n\nexport const $entityMasks = Symbol('entityMasks')\nexport const $entityComponents = Symbol('entityComponents')\nexport const $entitySparseSet = Symbol('entitySparseSet')\nexport const $entityArray = Symbol('entityArray')\nexport const $entityIndices = Symbol('entityIndices')\nexport const $removedEntities = Symbol('removedEntities')\n\nlet defaultSize = 100000\n\n// need a global EID cursor which all worlds and all components know about\n// so that world entities can posess entire rows spanning all component tables\nlet globalEntityCursor = 0\nlet globalSize = defaultSize\nlet resizeThreshold = () => globalSize - (globalSize / 5)\n\nexport const getGlobalSize = () => globalSize\n\n// removed eids should also be global to prevent memory leaks\nconst removed = []\n\nexport const resetGlobals = () => {\n  globalSize = defaultSize\n  globalEntityCursor = 0\n  removed.length = 0\n}\n\nexport const getDefaultSize = () => defaultSize\n\n/**\n * Sets the default maximum number of entities for worlds and component stores.\n *\n * @param {number} size\n */\nexport const setDefaultSize = size => { \n  defaultSize = size\n  resetGlobals()\n}\n\nexport const getEntityCursor = () => globalEntityCursor\nexport const getRemovedEntities = () => removed\n\nexport const eidToWorld = new Map()\n\n/**\n * Adds a new entity to the specified world.\n *\n * @param {World} world\n * @returns {number} eid\n */\nexport const addEntity = (world) => {\n\n  // if data stores are 80% full\n  if (globalEntityCursor >= resizeThreshold()) {\n    // grow by half the original size rounded up to a multiple of 4\n    const size = globalSize\n    const amount = Math.ceil((size/2) / 4) * 4\n    const newSize = size + amount\n    globalSize = newSize\n    resizeWorlds(newSize)\n    resizeComponents(newSize)\n    setSerializationResized(true)\n    console.info(`👾 bitECS - resizing all data stores from ${size} to ${newSize}`)\n  }\n\n  const eid = removed.length > 0 ? removed.shift() : globalEntityCursor++\n  \n  world[$entitySparseSet].add(eid)\n  eidToWorld.set(eid, world)\n\n  world[$notQueries].forEach(q => {\n    const match = queryCheckEntity(world, q, eid)\n    if (match) queryAddEntity(q, eid)\n  })\n\n  world[$entityComponents].set(eid, new Set())\n\n  return eid\n}\n\n/**\n * Removes an existing entity from the specified world.\n *\n * @param {World} world\n * @param {number} eid\n */\nexport const removeEntity = (world, eid) => {\n  // Check if entity is already removed\n  if (!world[$entitySparseSet].has(eid)) return\n\n  // Remove entity from all queries\n  // TODO: archetype graph\n  world[$queries].forEach(q => {\n    queryRemoveEntity(world, q, eid)\n  })\n\n  // Free the entity\n  removed.push(eid)\n\n  // remove all eid state from world\n  world[$entitySparseSet].remove(eid)\n  world[$entityComponents].delete(eid)\n\n  // remove from deserializer mapping\n  world[$localEntities].delete(world[$localEntityLookup].get(eid))\n  world[$localEntityLookup].delete(eid)\n\n  // Clear entity bitmasks\n  for (let i = 0; i < world[$entityMasks].length; i++) world[$entityMasks][i][eid] = 0\n}\n\n/**\n *  Returns an array of components that an entity possesses.\n *\n * @param {*} world\n * @param {*} eid\n */\nexport const getEntityComponents = (world, eid) => Array.from(world[$entityComponents].get(eid))","import { SparseSet } from './Util.js'\nimport { $queryShadow, $storeFlattened, $tagStore, createShadow } from './Storage.js'\nimport { $componentMap, registerComponent } from './Component.js'\nimport { $entityMasks, $entityArray, getEntityCursor, $entitySparseSet } from './Entity.js'\n\n\n\nexport function Not(c) { return () => [c, 'not'] }\nexport function Or(c) { return () => [c, 'or'] }\nexport function Changed(c) { return () => [c, 'changed'] }\n\nexport function Any(...comps) { return function QueryAny() { return comps } }\nexport function All(...comps) { return function QueryAll() { return comps } }\nexport function None(...comps) { return function QueryNone() { return comps } }\n\nexport const $queries = Symbol('queries')\nexport const $notQueries = Symbol('notQueries')\n\nexport const $queryAny = Symbol('queryAny')\nexport const $queryAll = Symbol('queryAll')\nexport const $queryNone = Symbol('queryNone')\n\nexport const $queryMap = Symbol('queryMap')\nexport const $dirtyQueries = Symbol('$dirtyQueries')\nexport const $queryComponents = Symbol('queryComponents')\nexport const $enterQuery = Symbol('enterQuery')\nexport const $exitQuery = Symbol('exitQuery')\n\n/**\n * Given an existing query, returns a new function which returns entities who have been added to the given query since the last call of the function.\n *\n * @param {function} query\n * @returns {function} enteredQuery\n */\nexport const enterQuery = query => world => {\n  if (!world[$queryMap].has(query)) registerQuery(world, query)\n  const q = world[$queryMap].get(query)\n  const entered = q.entered.dense.slice()\n  q.entered = SparseSet()\n  return entered\n}\n\n/**\n * Given an existing query, returns a new function which returns entities who have been removed from the given query since the last call of the function.\n *\n * @param {function} query\n * @returns {function} enteredQuery\n */\nexport const exitQuery = query => world => {\n  if (!world[$queryMap].has(query)) registerQuery(world, query)\n  const q = world[$queryMap].get(query)\n  const exited = q.exited.dense.slice()\n  q.exited = SparseSet()\n  return exited\n}\n\nexport const registerQuery = (world, query) => {\n\n  const components = []\n  const notComponents = []\n  const changedComponents = []\n\n  query[$queryComponents].forEach(c => {\n    if (typeof c === 'function') {\n      const [comp, mod] = c()\n      if (!world[$componentMap].has(comp)) registerComponent(world, comp)\n      if (mod === 'not') {\n        notComponents.push(comp)\n      }\n      if (mod === 'changed') {\n        changedComponents.push(comp)\n        components.push(comp)\n      }\n      // if (mod === 'all') {\n      //   allComponents.push(comp)\n      // }\n      // if (mod === 'any') {\n      //   anyComponents.push(comp)\n      // }\n      // if (mod === 'none') {\n      //   noneComponents.push(comp)\n      // }\n    } else {\n      if (!world[$componentMap].has(c)) registerComponent(world, c)\n      components.push(c)\n    }\n  })\n\n\n  const mapComponents = c => world[$componentMap].get(c)\n\n  const allComponents = components.concat(notComponents).map(mapComponents)\n\n  // const sparseSet = Uint32SparseSet(getGlobalSize())\n  const sparseSet = SparseSet()\n\n  const archetypes = []\n  // const changed = SparseSet()\n  const changed = []\n  const toRemove = SparseSet()\n  const entered = SparseSet()\n  const exited = SparseSet()\n\n  const generations = allComponents\n    .map(c => c.generationId)\n    .reduce((a,v) => {\n      if (a.includes(v)) return a\n      a.push(v)\n      return a\n    }, [])\n\n  const reduceBitflags = (a,c) => {\n    if (!a[c.generationId]) a[c.generationId] = 0\n    a[c.generationId] |= c.bitflag\n    return a\n  }\n  const masks = components\n    .map(mapComponents)\n    .reduce(reduceBitflags, {})\n\n  const notMasks = notComponents\n    .map(mapComponents)\n    .reduce(reduceBitflags, {})\n\n  // const orMasks = orComponents\n  //   .map(mapComponents)\n  //   .reduce(reduceBitmasks, {})\n\n  const hasMasks = allComponents\n    .reduce(reduceBitflags, {})\n\n  const flatProps = components\n    .filter(c => !c[$tagStore])\n    .map(c => Object.getOwnPropertySymbols(c).includes($storeFlattened) ? c[$storeFlattened] : [c])\n    .reduce((a,v) => a.concat(v), [])\n\n  const shadows = flatProps.map(prop => {\n      const $ = Symbol()\n      createShadow(prop, $)\n      return prop[$]\n  }, [])\n\n  const q = Object.assign(sparseSet, {\n    archetypes,\n    changed,\n    components,\n    notComponents,\n    changedComponents,\n    allComponents,\n    masks,\n    notMasks,\n    // orMasks,\n    hasMasks,\n    generations,\n    flatProps,\n    toRemove,\n    entered,\n    exited,\n    shadows,\n  })\n  \n  world[$queryMap].set(query, q)\n  world[$queries].add(q)\n  \n  allComponents.forEach(c => {\n    c.queries.add(q)\n  })\n\n  if (notComponents.length) world[$notQueries].add(q)\n\n  for (let eid = 0; eid < getEntityCursor(); eid++) {\n    if (!world[$entitySparseSet].has(eid)) continue\n    const match = queryCheckEntity(world, q, eid)\n    if (match) queryAddEntity(q, eid)\n  }\n}\n\nconst diff = (q, clearDiff) => {\n  if (clearDiff) q.changed = []\n  const { flatProps, shadows } = q\n  for (let i = 0; i < q.dense.length; i++) {\n    const eid = q.dense[i]\n    let dirty = false\n    for (let pid = 0; pid < flatProps.length; pid++) {\n      const prop = flatProps[pid]\n      const shadow = shadows[pid]\n      if (ArrayBuffer.isView(prop[eid])) {\n        for (let i = 0; i < prop[eid].length; i++) {\n          if (prop[eid][i] !== shadow[eid][i]) {\n            dirty = true\n            break\n          }\n        }\n        shadow[eid].set(prop[eid])\n      } else {\n        if (prop[eid] !== shadow[eid]) {\n          dirty = true\n          shadow[eid] = prop[eid]\n        }\n      }\n    }\n    if (dirty) q.changed.push(eid)\n  }\n  return q.changed\n}\n\n// const queryEntityChanged = (q, eid) => {\n//   if (q.changed.has(eid)) return\n//   q.changed.add(eid)\n// }\n\n// export const entityChanged = (world, component, eid) => {\n//   const { changedQueries } = world[$componentMap].get(component)\n//   changedQueries.forEach(q => {\n//     const match = queryCheckEntity(world, q, eid)\n//     if (match) queryEntityChanged(q, eid)\n//   })\n// }\n\nconst flatten = (a,v) => a.concat(v)\n\nconst aggregateComponentsFor = mod => x => x.filter(f => f.name === mod().constructor.name).reduce(flatten)\n\nconst getAnyComponents = aggregateComponentsFor(Any)\nconst getAllComponents = aggregateComponentsFor(All)\nconst getNoneComponents = aggregateComponentsFor(None)\n\n/**\n * Defines a query function which returns a matching set of entities when called on a world.\n *\n * @param {array} components\n * @returns {function} query\n */\n\nexport const defineQuery = (...args) => {\n  let components\n  let any, all, none\n  if (Array.isArray(args[0])) {\n    components = args[0]\n  } else {\n    // any = getAnyComponents(args)\n    // all = getAllComponents(args)\n    // none = getNoneComponents(args)\n  }\n  \n\n  if (components === undefined || components[$componentMap] !== undefined) {\n    return world => world ? world[$entityArray] : components[$entityArray]\n  }\n\n  const query = function (world, clearDiff=true) {\n    if (!world[$queryMap].has(query)) registerQuery(world, query)\n\n    const q = world[$queryMap].get(query)\n\n    commitRemovals(world)\n\n    if (q.changedComponents.length) return diff(q, clearDiff)\n    // if (q.changedComponents.length) return q.changed.dense\n\n    return q.dense\n  }\n\n  query[$queryComponents] = components\n  query[$queryAny] = any\n  query[$queryAll] = all\n  query[$queryNone] = none\n\n  return query\n}\n\nconst bin = value => {\n  if (!Number.isSafeInteger(value)) {\n    throw new TypeError('value must be a safe integer');\n  }\n\n  const negative = value < 0;\n  const twosComplement = negative ? Number.MAX_SAFE_INTEGER + value + 1 : value;\n  const signExtend = negative ? '1' : '0';\n\n  return twosComplement.toString(2).padStart(4, '0').padStart(0, signExtend);\n}\n\n// TODO: archetype graph\nexport const queryCheckEntity = (world, q, eid) => {\n  const { masks, notMasks, generations } = q\n  let or = 0\n  for (let i = 0; i < generations.length; i++) {\n    const generationId = generations[i]\n    const qMask = masks[generationId]\n    const qNotMask = notMasks[generationId]\n    // const qOrMask = orMasks[generationId]\n    const eMask = world[$entityMasks][generationId][eid]\n    \n    // any\n    // if (qOrMask && (eMask & qOrMask) !== qOrMask) {\n    //   continue\n    // }\n    // not all \n    // if (qNotMask && (eMask & qNotMask) === qNotMask) {\n    // }\n    // not any\n    if (qNotMask && (eMask & qNotMask) !== 0) {\n      return false\n    }\n    // all\n    if (qMask && (eMask & qMask) !== qMask) {\n      return false\n    }\n  }\n  return true\n}\n\nexport const queryCheckComponent = (q, c) => {\n  const { generationId, bitflag } = c\n  const { hasMasks } = q\n  const mask = hasMasks[generationId]\n  return (mask & bitflag) === bitflag\n}\n\nexport const queryAddEntity = (q, eid) => {\n  q.toRemove.remove(eid)\n  if (!q.has(eid)) q.entered.add(eid)\n  q.add(eid)\n}\n\nconst queryCommitRemovals = (q) => {\n  for (let i = q.toRemove.dense.length-1; i >= 0; i--) {\n    const eid = q.toRemove.dense[i]\n    q.toRemove.remove(eid)\n    q.remove(eid)\n  }\n}\n\nexport const commitRemovals = (world) => {\n  if (!world[$dirtyQueries].size) return\n  world[$dirtyQueries].forEach(queryCommitRemovals)\n  world[$dirtyQueries].clear()\n}\n\nexport const queryRemoveEntity = (world, q, eid) => {\n  if (!q.has(eid) || q.toRemove.has(eid)) return\n  q.toRemove.add(eid)\n  world[$dirtyQueries].add(q)\n  q.exited.add(eid)\n}\n\n\n/**\n * Resets a Changed-based query, clearing the underlying list of changed entities.\n *\n * @param {World} world\n * @param {function} query\n */\nexport const resetChangedQuery = (world, query) => {\n  const q = world[$queryMap].get(query)\n  q.changed = []\n}\n\n/**\n * Removes a query from a world.\n *\n * @param {World} world\n * @param {function} query\n */\nexport const removeQuery = (world, query) => {\n  const q = world[$queryMap].get(query)\n  world[$queries].delete(q)\n  world[$queryMap].delete(query)\n}","import { $storeSize, createStore, resetStoreFor, resizeStore } from './Storage.js'\nimport { $queries, queryAddEntity, queryRemoveEntity, queryCheckEntity, commitRemovals } from './Query.js'\nimport { $bitflag, $size } from './World.js'\nimport { $entityMasks, getDefaultSize, eidToWorld, $entityComponents, getGlobalSize, $entitySparseSet } from './Entity.js'\n\nexport const $componentMap = Symbol('componentMap')\n\nexport const components = []\n\nexport const resizeComponents = (size) => {\n  components.forEach(component => resizeStore(component, size))\n}\n\n\n/**\n * Defines a new component store.\n *\n * @param {object} schema\n * @returns {object}\n */\nexport const defineComponent = (schema) => {\n  const component = createStore(schema, getGlobalSize())\n  if (schema && Object.keys(schema).length) components.push(component)\n  return component\n}\n\nexport const incrementBitflag = (world) => {\n  world[$bitflag] *= 2\n  if (world[$bitflag] >= 2**31) {\n    world[$bitflag] = 1\n    world[$entityMasks].push(new Uint32Array(world[$size]))\n  }\n}\n\n\n/**\n * Registers a component with a world.\n *\n * @param {World} world\n * @param {Component} component\n */\nexport const registerComponent = (world, component) => {\n  if (!component) throw new Error(`bitECS - Cannot register null or undefined component`)\n\n  const queries = new Set()\n  const notQueries = new Set()\n  const changedQueries = new Set()\n\n  world[$queries].forEach(q => {\n    if (q.allComponents.includes(component)) {\n      queries.add(q)\n    }\n  })\n\n  world[$componentMap].set(component, { \n    generationId: world[$entityMasks].length - 1,\n    bitflag: world[$bitflag],\n    store: component,\n    queries,\n    notQueries,\n    changedQueries,\n  })\n\n  if (component[$storeSize] < getGlobalSize()) {\n    resizeStore(component, getGlobalSize())\n  }\n\n  incrementBitflag(world)\n}\n\n/**\n * Registers multiple components with a world.\n *\n * @param {World} world\n * @param {Component} components\n */\nexport const registerComponents = (world, components) => {\n  components.forEach(c => registerComponent(world, c))\n}\n\n/**\n * Checks if an entity has a component.\n *\n * @param {World} world\n * @param {Component} component\n * @param {number} eid\n * @returns {boolean}\n */\nexport const hasComponent = (world, component, eid) => {\n  const registeredComponent = world[$componentMap].get(component)\n  if (!registeredComponent) return false\n  const { generationId, bitflag } = registeredComponent\n  const mask = world[$entityMasks][generationId][eid]\n  return (mask & bitflag) === bitflag\n}\n\n/**\n * Adds a component to an entity\n *\n * @param {World} world\n * @param {Component} component\n * @param {number} eid\n * @param {boolean} [reset=false]\n */\nexport const addComponent = (world, component, eid, reset=true) => {\n  if (eid === undefined) throw new Error('bitECS - entity is undefined.')\n  if (!world[$entitySparseSet].has(eid)) throw new Error('bitECS - entity does not exist in the world.')\n  if (!world[$componentMap].has(component)) registerComponent(world, component)\n  if (hasComponent(world, component, eid)) return\n\n  const c = world[$componentMap].get(component)\n  const { generationId, bitflag, queries, notQueries } = c\n    \n  // Add bitflag to entity bitmask\n  world[$entityMasks][generationId][eid] |= bitflag\n\n  // todo: archetype graph\n  queries.forEach(q => {\n    // remove this entity from toRemove if it exists in this query\n    if (q.toRemove.has(eid)) q.toRemove.remove(eid)\n    const match = queryCheckEntity(world, q, eid)\n    if (match) queryAddEntity(q, eid)\n    if (!match) queryRemoveEntity(world, q, eid)\n  })\n\n  world[$entityComponents].get(eid).add(component)\n\n  // Zero out each property value\n  if (reset) resetStoreFor(component, eid)\n}\n\n/**\n * Removes a component from an entity and resets component state unless otherwise specified.\n *\n * @param {World} world\n * @param {Component} component\n * @param {number} eid\n * @param {boolean} [reset=true]\n */\nexport const removeComponent = (world, component, eid, reset=false) => {\n  if (eid === undefined) throw new Error('bitECS - entity is undefined.')\n  if (!world[$entitySparseSet].has(eid)) throw new Error('bitECS - entity does not exist in the world.')\n  if (!hasComponent(world, component, eid)) return\n\n  const c = world[$componentMap].get(component)\n  const { generationId, bitflag, queries } = c\n\n  // Remove flag from entity bitmask\n  world[$entityMasks][generationId][eid] &= ~bitflag\n  \n  // todo: archetype graph\n  queries.forEach(q => {\n    // remove this entity from toRemove if it exists in this query\n    if (q.toRemove.has(eid)) q.toRemove.remove(eid)\n    const match = queryCheckEntity(world, q, eid)\n    if (match) queryAddEntity(q, eid)\n    if (!match) queryRemoveEntity(world, q, eid)\n  })\n\n  world[$entityComponents].get(eid).delete(component)\n\n  // Zero out each property value\n  if (reset) resetStoreFor(component, eid)\n}\n","import { $componentMap } from './Component.js'\nimport { $queryMap, $queries, $dirtyQueries, $notQueries } from './Query.js'\nimport { $entityArray, $entityComponents, $entityMasks, $entitySparseSet, getGlobalSize, removeEntity } from './Entity.js'\nimport { resize } from './Storage.js'\nimport { SparseSet } from './Util.js'\n\nexport const $size = Symbol('size')\nexport const $resizeThreshold = Symbol('resizeThreshold')\nexport const $bitflag = Symbol('bitflag')\nexport const $archetypes = Symbol('archetypes')\nexport const $localEntities = Symbol('localEntities')\nexport const $localEntityLookup = Symbol('localEntityLookp')\n\nexport const worlds = []\n\nexport const resizeWorlds = (size) => {\n  worlds.forEach(world => {\n    world[$size] = size\n\n    for (let i = 0; i < world[$entityMasks].length; i++) {\n      const masks = world[$entityMasks][i];\n      world[$entityMasks][i] = resize(masks, size)\n    }\n    \n    world[$resizeThreshold] = world[$size] - (world[$size] / 5)\n  })\n}\n\n/**\n * Creates a new world.\n *\n * @returns {object}\n */\nexport const createWorld = (obj={}) => {\n  const world = obj\n  resetWorld(world)\n  worlds.push(world)\n  return world\n}\n\n/**\n * Resets a world.\n *\n * @param {World} world\n * @returns {object}\n */\nexport const resetWorld = (world) => {\n  const size = getGlobalSize()\n  world[$size] = size\n\n  if (world[$entityArray]) world[$entityArray].forEach(eid => removeEntity(world, eid))\n\n  world[$entityMasks] = [new Uint32Array(size)]\n  world[$entityComponents] = new Map()\n  world[$archetypes] = []\n\n  world[$entitySparseSet] = SparseSet()\n  world[$entityArray] = world[$entitySparseSet].dense\n\n  world[$bitflag] = 1\n\n  world[$componentMap] = new Map()\n\n  world[$queryMap] = new Map()\n  world[$queries] = new Set()\n  world[$notQueries] = new Set()\n  world[$dirtyQueries] = new Set()\n\n  world[$localEntities] = new Map()\n  world[$localEntityLookup] = new Map()\n\n  return world\n}\n\n/**\n * Deletes a world.\n *\n * @param {World} world\n */\nexport const deleteWorld = (world) => {\n  Object.getOwnPropertySymbols(world).forEach($ => { delete world[$] })\n  Object.keys(world).forEach(key => { delete world[key] })\n  worlds.splice(worlds.indexOf(world), 1)\n}\n","/**\n * Defines a new system function.\n *\n * @param {function} update\n * @returns {function}\n */\n export const defineSystem = (update) => (world, ...args) => {\n  update(world, ...args)\n  return world\n}","import { createWorld, resetWorld, deleteWorld } from './World.js'\nimport { addEntity, removeEntity, setDefaultSize, getEntityComponents} from './Entity.js'\nimport { defineComponent, registerComponent, registerComponents, hasComponent, addComponent, removeComponent } from './Component.js'\nimport { defineSystem } from './System.js'\nimport { defineQuery, enterQuery, exitQuery, Changed, Not, commitRemovals, resetChangedQuery, removeQuery } from './Query.js'\nimport { defineSerializer, defineDeserializer, DESERIALIZE_MODE } from './Serialize.js'\nimport { parentArray } from './Storage.js'\nimport { TYPES_ENUM } from './Constants.js'\n// import { defineProxy } from './Proxy.js'\n\nexport const pipe = (...fns) => (input) => {\n  let tmp = input\n  for (let i = 0; i < fns.length; i++) {\n    const fn = fns[i]\n    tmp = fn(tmp)\n  }\n  return tmp\n}\n\nexport const Types = TYPES_ENUM\n\nexport {\n\n  setDefaultSize,\n  createWorld,\n  resetWorld,\n  deleteWorld,\n  addEntity,\n  removeEntity,\n\n  registerComponent,\n  registerComponents,\n  defineComponent,\n  addComponent,\n  removeComponent,\n  hasComponent,\n  getEntityComponents,\n  // entityChanged,\n\n  // defineProxy,\n\n  defineQuery,\n  Changed,\n  Not,\n  // Or,\n  enterQuery,\n  exitQuery,\n  commitRemovals,\n  resetChangedQuery,\n  removeQuery,\n\n  defineSystem,\n  \n  defineSerializer,\n  defineDeserializer,\n  DESERIALIZE_MODE,\n\n  parentArray,\n\n}\n","exports.interopDefault = function (a) {\n  return a && a.__esModule ? a : {default: a};\n};\n\nexports.defineInteropFlag = function (a) {\n  Object.defineProperty(a, '__esModule', {value: true});\n};\n\nexports.exportAll = function (source, dest) {\n  Object.keys(source).forEach(function (key) {\n    if (key === 'default' || key === '__esModule' || dest.hasOwnProperty(key)) {\n      return;\n    }\n\n    Object.defineProperty(dest, key, {\n      enumerable: true,\n      get: function () {\n        return source[key];\n      },\n    });\n  });\n\n  return dest;\n};\n\nexports.export = function (dest, destName, get) {\n  Object.defineProperty(dest, destName, {\n    enumerable: true,\n    get: get,\n  });\n};\n"],"names":[],"version":3,"file":"bitecs-circle-collision.2a9e5b76.js.map","sourceRoot":"/__parcel_source_root/"}